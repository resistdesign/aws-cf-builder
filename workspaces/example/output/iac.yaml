AWSTemplateFormatVersion: 2010-09-09
Description: And example CloudFormation template.
Parameters:
  UIDomainName:
    Type: String
    Description: The domain name for the user interface.
    Default: app.example.com
  APIDomainName:
    Type: String
    Description: The domain name for the API.
    Default: api.example.com
  APIType:
    Type: String
    Description: The type of API to deploy.
    Default: lambda
  APIPatchedParam1:
    Type: String
  APIPatchedParam2:
    Type: String
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: UI Parameters
        Parameters:
          - UIDomainName
      - Label:
          default: API Parameters
        Parameters:
          - APIDomainName
          - APIType
          - APIPatchedParam1
          - APIPatchedParam2
    ParameterLabels:
      UIDomainName:
        default: UI Domain Name
      APIDomainName:
        default: API Domain Name
      APIType:
        default: API Type
      APIPatchedParam1:
        default: API Patched Param 1
      APIPatchedParam2:
        default: API Patched Param 2
Resources:
  UIStaticFiles:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
    Properties:
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - "*"
            AllowedMethods:
              - GET
              - PUT
              - POST
              - DELETE
              - HEAD
            AllowedOrigins:
              - "*"
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
  UICDNCloudFront:
    Type: AWS::CloudFront::Distribution
    DependsOn: UIStaticFiles
    Properties:
      DistributionConfig:
        Aliases:
          - Ref: UIDomainName
        ViewerCertificate:
          AcmCertificateArn: arn:aws:acm:us-east-1:123456789012:certificate/12345678-1234-1234-1234-123456789012
          SslSupportMethod: sni-only
          MinimumProtocolVersion: TLSv1.1_2016
        DefaultCacheBehavior:
          ForwardedValues:
            QueryString: false
          TargetOriginId:
            Fn::Sub:
              - S3-${S3BucketName}
              - S3BucketName:
                  Ref: UIDomainName
          ViewerProtocolPolicy: redirect-to-https
        DefaultRootObject: index.html
        Enabled: true
        IPV6Enabled: false
        HttpVersion: http2
        Origins:
          - DomainName:
              Fn::Sub:
                - ${S3BucketName}.s3.amazonaws.com
                - S3BucketName:
                    Ref: UIDomainName
            Id:
              Fn::Sub:
                - S3-${S3BucketName}
                - S3BucketName:
                    Ref: UIDomainName
            S3OriginConfig:
              OriginAccessIdentity: ""
        CustomErrorResponses:
          - ErrorCachingMinTTL: 300
            ErrorCode: 404
            ResponseCode: 200
            ResponsePagePath: /index.html
          - ErrorCachingMinTTL: 300
            ErrorCode: 403
            ResponseCode: 200
            ResponsePagePath: /index.html
        PriceClass: PriceClass_All
  UICDNRoute53Record:
    Type: AWS::Route53::RecordSet
    DependsOn:
      - UICDNCloudFront
    Properties:
      HostedZoneId: <example.com-hosted-zone-id>
      Type: A
      Name:
        Fn::Sub:
          - ${DomainName}.
          - DomainName:
              Ref: UIDomainName
      AliasTarget:
        HostedZoneId: Z2FDTNDATAQYW2
        DNSName:
          Fn::Sub:
            - ${DomainName}.
            - DomainName:
                Fn::GetAtt:
                  - UICDNCloudFront
                  - DomainName
  APICFRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      Policies:
        - PolicyName: lambda-parameter-store
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "*"
                Resource: "*"
  APICF:
    Type: AWS::Lambda::Function
    Properties:
      Timeout: 30
      Code:
        ZipFile: |
          module.exports = {handler: async () => ({
                      statusCode: 200,
                      headers: {'Content-Type': 'application/json'},
                      body: '"You did it!"'
                    })};
      Environment:
        Variables:
          NODE_ENV: production
      Handler: index.handler
      Role:
        Fn::GetAtt:
          - APICFRole
          - Arn
      Runtime: nodejs12.x
  APIGW:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name:
        Fn::Sub: ${AWS::StackName}-APIGWGatewayRESTAPI
      EndpointConfiguration:
        Types:
          - EDGE
  APIGWGatewayRESTAPIResource:
    Type: AWS::ApiGateway::Resource
    DependsOn: APIGW
    Properties:
      ParentId:
        Fn::GetAtt:
          - APIGW
          - RootResourceId
      PathPart: "{proxy+}"
      RestApiId:
        Ref: APIGW
  APIGWGatewayRESTAPIMethod:
    Type: AWS::ApiGateway::Method
    DependsOn: APIGWGatewayRESTAPIResource
    Properties:
      AuthorizationType: NONE
      HttpMethod: ANY
      ResourceId:
        Ref: APIGWGatewayRESTAPIResource
      RestApiId:
        Ref: APIGW
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APICF.Arn}/invocations
  APIGWGatewayRESTAPIRootMethod:
    Type: AWS::ApiGateway::Method
    DependsOn: APIGWGatewayRESTAPIResource
    Properties:
      AuthorizationType: NONE
      HttpMethod: ANY
      ResourceId:
        Fn::GetAtt:
          - APIGW
          - RootResourceId
      RestApiId:
        Ref: APIGW
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APICF.Arn}/invocations
  APIGWGatewayRESTAPIOPTIONSMethod:
    Type: AWS::ApiGateway::Method
    DependsOn: APIGWGatewayRESTAPIResource
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      ResourceId:
        Ref: APIGWGatewayRESTAPIResource
      RestApiId:
        Ref: APIGW
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APICF.Arn}/invocations
  APIGWGatewayRESTAPIRootOPTIONSMethod:
    Type: AWS::ApiGateway::Method
    DependsOn: APIGWGatewayRESTAPIResource
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      ResourceId:
        Fn::GetAtt:
          - APIGW
          - RootResourceId
      RestApiId:
        Ref: APIGW
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APICF.Arn}/invocations
  APIGWGatewayResponseDefault4XX:
    Type: AWS::ApiGateway::GatewayResponse
    Properties:
      ResponseParameters:
        gatewayresponse.header.Access-Control-Allow-Origin: method.request.header.origin
        gatewayresponse.header.Access-Control-Allow-Credentials: "'true'"
        gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
      ResponseType: DEFAULT_4XX
      RestApiId:
        Ref: APIGW
  APIGWGatewayRESTAPIDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - APIGWGatewayRESTAPIResource
      - APIGWGatewayRESTAPIMethod
      - APIGWGatewayRESTAPIRootMethod
      - APIGW
      - APICF
    Properties:
      RestApiId:
        Ref: APIGW
  APIGWCloudWatch:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: ${AWS::StackName}-APIGWGatewayLogs
  APIGWCloudWatchRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs
  APIGWCloudWatchAccount:
    Type: AWS::ApiGateway::Account
    Properties:
      CloudWatchRoleArn:
        Fn::GetAtt:
          - APIGWCloudWatchRole
          - Arn
  APIGWGatewayRESTAPIEnvironment:
    Type: AWS::ApiGateway::Stage
    DependsOn:
      - APIGWCloudWatchAccount
      - APIGWGatewayRESTAPIDeployment
    Properties:
      AccessLogSetting:
        DestinationArn:
          Fn::GetAtt:
            - APIGWCloudWatch
            - Arn
        Format: '{"requestId":"$context.requestId","ip":"$context.identity.sourceIp","caller":"$context.identity.caller","user":"$context.identity.user","requestTime":"$context.requestTime","httpMethod":"$context.httpMethod","resourcePath":"$context.resourcePath","status":"$context.status","protocol":"$context.protocol","responseLength":"$context.responseLength","apiGatewayErrorMessage":"$context.error.message"}'
      DeploymentId:
        Ref: APIGWGatewayRESTAPIDeployment
      RestApiId:
        Ref: APIGW
      StageName: production
  APIGWDomainName:
    Type: AWS::ApiGateway::DomainName
    Properties:
      CertificateArn: arn:aws:acm:us-east-1:123456789012:certificate/12345678-1234-1234-1234-123456789012
      DomainName: api.example.com
      EndpointConfiguration:
        Types:
          - EDGE
  APIGWDomainNameBasePathMapping:
    Type: AWS::ApiGateway::BasePathMapping
    DependsOn:
      - APIGW
      - APIGWGatewayRESTAPIEnvironment
      - APIGWDomainName
    Properties:
      DomainName: api.example.com
      RestApiId:
        Ref: APIGW
      Stage: production
  APIGWRoute53Record:
    Type: AWS::Route53::RecordSet
    DependsOn: APIGWDomainName
    Properties:
      HostedZoneId: THE_ZONE
      Type: A
      Name:
        Fn::Sub:
          - ${DomainName}.
          - DomainName: api.example.com
      AliasTarget:
        HostedZoneId: Z2FDTNDATAQYW2
        DNSName:
          Fn::Sub:
            - ${DomainName}.
            - DomainName:
                Fn::GetAtt:
                  - APIGWDomainName
                  - DistributionDomainName
  APIGWCloudFunctionANYResourcePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      FunctionName:
        Fn::GetAtt:
          - APICF
          - Arn
      SourceArn:
        Fn::Sub:
          - arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/*/*
          - __Stage__: production
            __ApiId__:
              Ref: APIGW
Outputs:
  Info:
    Description: Basic information.
    Export:
      Name: Info
    Value: This stack was created with AWS CF Builder.
